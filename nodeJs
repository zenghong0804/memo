Node.js 是运行在服务端的 JavaScript.

用以下命令来确认当前Node版本。
$ node -v

console.log("Hello World"); 是用来打Log的，用Chrome Fn+F12 可以看见输出。soure可以看见代码。也可以debug。

Node.js 安装包及源码下载地址为：https://nodejs.org/en/download/。
安装的时候有Add Path的选项。

使用NVM 来管理不用版本的node与npm
https://www.runoob.com/w3cnote/nvm-manager-node-versions.html

Node.js 应用是由哪几部分组成的：
引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。
创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。
接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。

npm的一些命令
npm -v 查看版本
npm install npm -g 升级

使用 npm 命令安装模块
npm install <Module Name>
例：npm install express

安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require('express') 的方式就好，无需指定第三方包路径。
var express = require('express');

npm install express          # 本地安装
npm install express -g   # 全局安装

我们可以使用以下命令来卸载 Node.js 模块。
npm uninstall express
卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：
npm ls

我们可以使用以下命令更新模块：
npm update express
使用以下来搜索模块：
npm search express

创建模块
npm init

接下来我们就用以下命令来发布模块：
npm publish

如果你遇到了使用 npm 安 装node_modules 总是提示报错：报错: npm resource busy or locked.....。

可以先删除以前安装的 node_modules :
npm cache clean 可以清空NPM本地缓存
npm install

Node.js REPL(交互式解释器)
cmd => node 就能启动

ctrl + c - 退出当前终端。
ctrl + c 按下两次 - 退出 Node REPL。
ctrl + d - 退出 Node REPL.
向上/向下 键 - 查看输入的历史命令
tab 键 - 列出当前命令
.help - 列出使用命令

非阻塞代码实例
var fs = require("fs");

fs.readFile('input.txt', function (err, data) {
    if (err) return console.error(err);
    console.log(data.toString());
});

console.log("程序执行结束!");
我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。

Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。
Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.

使用场景：
一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。
一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。
一个对象必须通知其他对象，而并不知道这些对象是谁。
需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。
注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。

// 引入 events 模块
var events = require('events');
// 创建 eventEmitter 对象
var eventEmitter = new events.EventEmitter();
 
// 创建事件处理程序
var connectHandler = function connected() {
   console.log('连接成功。');
  
   // 触发 data_received 事件 
   eventEmitter.emit('data_received');
}
 
// 绑定 connection 事件处理程序
eventEmitter.on('connection', connectHandler);
 
// 使用匿名函数绑定 data_received 事件
eventEmitter.on('data_received', function(){
   console.log('数据接收成功。');

   eventEmitter.emit('zenghong');
});

//test
var zenghongEvent = function connected() {
	console.log('学会了。');

}

// 绑定 connection 事件处理程序
eventEmitter.on('zenghong', zenghongEvent);

// 触发 connection 事件 
eventEmitter.emit('connection');
 
console.log("程序执行完毕。");



